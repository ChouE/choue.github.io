<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://choue.github.io</id>
    <title>ChouEV</title>
    <updated>2020-08-09T10:37:37.677Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://choue.github.io"/>
    <link rel="self" href="https://choue.github.io/atom.xml"/>
    <subtitle>WHY</subtitle>
    <logo>https://choue.github.io/images/avatar.png</logo>
    <icon>https://choue.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ChouEV</rights>
    <entry>
        <title type="html"><![CDATA[使用Jupyter NoteBook]]></title>
        <id>https://choue.github.io/post/shi-yong-jupyter-notebook/</id>
        <link href="https://choue.github.io/post/shi-yong-jupyter-notebook/">
        </link>
        <updated>2020-08-09T10:31:44.000Z</updated>
        <summary type="html"><![CDATA[<p>Jupyter NoteBook可以在文档中执行代码，添加markdown说明注释；分块运行测试，整体运行；以网页的形式进行分享；导出为多种格式的文档等。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Jupyter NoteBook可以在文档中执行代码，添加markdown说明注释；分块运行测试，整体运行；以网页的形式进行分享；导出为多种格式的文档等。</p>
<!-- more -->
<h2 id="安装和使用">安装和使用</h2>
<p>Jupyter NoteBook借鉴了<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E5%AD%A6%E7%BC%96%E7%A8%8B">文学编程</a>的模式。这种模式不同于传统的由计算机强加的编写程序的方式和顺序，而代之以让程序员用其逻辑和流程要求的顺序进行程序的开发。就好比自己写文章一样，在适当的部分加入代码，适当的部分加入说明，而且不失整体性。</p>
<p>本身Jupyter是基于IPython的一个项目，随着项目的发展，Jupyter也不仅限于Python一种语言。</p>
<ul>
<li>
<p>适合数据分析</p>
<p>可以将数据分析的代码和结果都展示在一个窗口中，并且可以将说明文档也嵌入其中。</p>
</li>
<li>
<p>支持多语言</p>
<p>支持非常多的<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels">语言</a>。</p>
</li>
<li>
<p>分享方便</p>
<p>支持以网页的方式进行分享，使用<a href="https://nbviewer.jupyter.org/">nbviewer</a>进行文档分享</p>
</li>
<li>
<p>可以远程</p>
<p>如果有服务器，那么可以远程链接到服务器上进行编写和运行，比如<a href="https://jupyter.org/try">这里</a>可以使用官方给的远程服务</p>
</li>
<li>
<p>交互式展示</p>
<p>不仅可以输出图片、视频和数学公式，还可以呈现一些互动的可视化内容，比如可以缩放的地图或者是可以旋转的三维模型。这需要使用交互式插件来支持。</p>
</li>
</ul>
<h3 id="安装">安装</h3>
<pre><code class="language-python">pip install jupyter notebook
</code></pre>
<h3 id="运行">运行</h3>
<p>在Windows Terminal 中，切换到想要的目录，然后输入：</p>
<pre><code class="language-python">jupyter notebook
</code></pre>
<p>终端就会打开页面。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/ChouE/image-host/master/img/image-20200809152022583.png" alt="image-20200809152022583" loading="lazy"></figure>
<p>在终端也会显示日志。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/ChouE/image-host/master/img/image-20200809151841461.png" alt="image-20200809151841461" loading="lazy"></figure>
<p>在页面右上角new可以新建文件或者目录。</p>
<p>如果要关闭运行的文档，可以点击文件前的复选框，然后<code>shutdown</code>。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/ChouE/image-host/master/img/image-20200809152304888.png" alt="image-20200809152304888" loading="lazy"></figure>
<p>如果想要终止Jupyter NoteBook的服务，需要在终端中<code>Ctrl + C</code>。</p>
<h3 id="界面">界面</h3>
<p>在界面中按<code>h</code>可以查看帮助，里面有快捷键说明，并且可以自定义快捷键。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/ChouE/image-host/master/img/image-20200809160814511.png" alt="image-20200809160814511" loading="lazy"></figure>
<p>在jupyter中，有两种模式，一种是编辑模式，这种模式可以编辑代码和文本，这种模式中文本框是绿色的。另一种是命令模式，可以使用各种快捷键进行操作。类似于Vim编辑器的模式。在文本框中按<code>Enter</code> 即可进入编辑，按<code>Esc</code> 进入命令模式。</p>
<ul>
<li>代码单元，按<code>y</code>切换单元到代码单元，按<code>Shift + Enter</code> 运行代码，结果会显示在代码块的下方。</li>
</ul>
<p>​       代码单元左边会有和IPython一样的行号，可以查看代码的执行顺序。</p>
<ul>
<li>Markdown单元，按<code>m</code> 切换到Markdown单元，可以以markdown的格式输入文档说明，插入链接、图片和数学公式等，同样也是按<code>Shift + Enter</code>进行渲染。</li>
</ul>
<p>按<code>b</code>键可以在下方添加新行，熟悉各种快捷键之后，对文档的编辑效率会大大提高。</p>
<h2 id="magic功能">magic功能</h2>
<p>Jupyter内置了很多功能，输入<code>lsmagic</code> 即可显示所有的命令。</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/ChouE/image-host/master/img/image-20200809171735096.png" alt="image-20200809171735096" loading="lazy"></figure>
<p>这里的命令包括了两种，一种是使用一个<code>%</code>包围的命令，这种命令的生效范围是行，使用这种命令时可以省略前缀<code>%</code> 会自动补全。</p>
<p>如果是两个<code>%%</code>包括的命令就是对整个文档生效的命令。</p>
<h2 id="创建ppt">创建PPT</h2>
<p>使用Jupyter可以创建PPT。</p>
<p>进入[View -&gt; Cell Toolbar]，然后点击[Sideshow]。这样每个块的右边都显示了一个Slide Type。选择其作为幻灯片的什么部分，结构很简单，自己摸索以下就可以明白。然后在导出时就可以选择导出为Slide，一个HTML格式的PPT。</p>
<h2 id="安装拓展">安装拓展</h2>
<pre><code class="language-bash">pip install jupyter_contrib_nbextensions
jupyter contrib nbextensions install - user
</code></pre>
<p>完成之后打开Jupyter就可以看到NBExtensions的选项卡。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2]]></title>
        <id>https://choue.github.io/post/wsl2/</id>
        <link href="https://choue.github.io/post/wsl2/">
        </link>
        <updated>2020-07-30T12:15:40.000Z</updated>
        <summary type="html"><![CDATA[<p>折腾windows 10中的WSL2</p>
]]></summary>
        <content type="html"><![CDATA[<p>折腾windows 10中的WSL2</p>
<!-- more -->
<h2 id="和vmware的冲突解决">和VMware的冲突解决</h2>
<p>安装了win10的2004预览版之后，由于wsl2的支持，自动开启了hyper-v，导致跟vmware发生冲突竞争<br>
据说VMware15.5.5以上可以兼容，暂未测试。<br>
想要正常VMware，需要关闭功能，使用管理员权限打开Windows Terminal：</p>
<pre><code class="language-bash">bcdedit /set hypervisorlaunchtype off
</code></pre>
<p>如果需要使用使用wsl2和docker，打开：</p>
<pre><code class="language-bash">bcdedit /set hypervisorlaunchtype auto
</code></pre>
<p><strong>每次调整都需要重启才能生效</strong></p>
<h2 id="和代理软件的冲突">和代理软件的冲突</h2>
<p>https://github.com/microsoft/WSL/issues/4177</p>
<p>由于Proxy，出现的错误提示：</p>
<blockquote>
<p>参考的对象类型不支持尝试的操作。</p>
</blockquote>
<blockquote>
<p>[process exited with code 4294967295]</p>
</blockquote>
<p>www.proxifier.com/tmp/Test20200228/NoLsp.exe<br>
使用root权限运行以下语句，解决问题：</p>
<pre><code>.\NoLsp.exe c:\windows\system32\wsl.exe
</code></pre>
<h2 id="换国内的源">换国内的源</h2>
<p>备份：</p>
<pre><code>cp /etc/apt/sources.list /etc/apt/sourses.list.bak
</code></pre>
<p>编辑：</p>
<pre><code>sudo vim /etc/apt/sources.list
</code></pre>
<p>换源：</p>
<pre><code>deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
</code></pre>
<p>更新：</p>
<pre><code>sudo apt-get update
sudo apt-get upgrade
</code></pre>
<h2 id="配置zsh">配置zsh</h2>
<pre><code>sudo apt-get install zsh
chsh -s /bin/zsh
</code></pre>
<h2 id="配置代理">配置代理</h2>
<p>由于WSL2更加的独立，所以要单独配置代理。<br>
使用的客户端为Clash for windows，打开Allow LAN选项。</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/07/31/xkhAyOGDKmCYJqn.png" alt="" loading="lazy"></figure>
<p>运行以下命令获取主机ip：</p>
<pre><code># 获取主机 IP
# 主机 IP 保存在 /etc/resolv.conf 中
export hostip=$(cat /etc/resolv.conf |grep -oP '(?&lt;=nameserver\ ).*')
</code></pre>
<p>配置代理端口，这里我的Clash端口http和socks都是7890，所以设置：</p>
<pre><code>alias setss='export https_proxy=&quot;http://${hostip}:7890&quot;;export http_proxy=&quot;http://${hostip}:8888&quot;;export all_proxy=&quot;socks5://${hostip}:7890&quot;;'
</code></pre>
<p>之后调用命令<code>setss</code>即可配置代理，解决github等网站的访问问题。</p>
<h2 id="安装-oh-my-zsh">安装 <code>oh-my-zsh</code></h2>
<p>用于快速配置<code>zsh</code>。<br>
直接用脚本安装即可：</p>
<pre><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
</code></pre>
<p>安装<code>zsh-syntax-hignlighting</code>:</p>
<pre><code># 下载
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git

# 移动到 plugins 文件夹中
mv zsh-syntax-highlighting $ZSH_CUSTOM/plugins

# 配置环境变量
cd ~
vim .zshrc

#在 plugins 一列中添加 zsh-syntax-highlighting，如下
plugins=(
         git
         zsh-syntax-highlighting
         )

# 在文件最后添加
source $ZSH_CUSTOM/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# 配置生效
source ~/.zshrc
</code></pre>
<p>安装<code>zsh-autosuggestions</code>插件</p>
<pre><code># 下载
git clone https://github.com/zsh-users/zsh-autosuggestions.git

# 移动到 plugins 文件夹中
mv zsh-autosuggestions $ZSH_CUSTOM/plugins

# 配置环境变量
cd ~
vim .zshrc

#在 plugins 一列中添加 zsh-autosuggestions，如下
plugins=(
         git
         zsh-syntax-highlighting
         zsh-autosuggestions
         )

# 在文件最后添加
source $ZSH_CUSTOM/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# 配置生效
source ~/.zshrc
</code></pre>
<p>安装neofetch看看效果</p>
<pre><code>apt install neofetch
</code></pre>
<p>输入命令<code>neofetch</code>即可看到效果。<br>
<img src="https://i.loli.net/2020/07/31/ZdHcJiqsAI18SRQ.png" alt="" loading="lazy"></p>
<h2 id="安装和配置docker">安装和配置Docker</h2>
<pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys  [key]
# 设置稳定的存储库
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;

# 更新 apt 包索引
sudo apt-get update

# 安装最新版本的 Docker 和 containerd
sudo apt-get install docker-ce docker-ce-cli containerd.io
</code></pre>
<p>由于WSL2不能使用<code>systemctl</code>，这里使用命令<code>sudo service docker start</code>启动docker。可以使用命令<code>service --status -all</code>查看所有服务的状态。<br>
运行<code>docker run hello-world</code>进行测试。</p>
<h2 id="技巧">技巧</h2>
<p>使用 Windows 应用和工具（如文件资源管理器）访问Linux根文件系统。</p>
<pre><code># 切换到根目录
cd ~
# 句尾有个点
explorer.exe .
</code></pre>
<h3 id="使用vs-code-连接wsl">使用VS Code 连接WSL</h3>
<p>下载插件WSL。<br>
左下角点击进行连接即可。<br>
会打开一个窗口访问的是WSL系统。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[考研中数据结构代码的书写规范及复杂度分析]]></title>
        <id>https://choue.github.io/post/kao-yan-zhong-shu-ju-jie-gou-dai-ma-de-shu-xie-gui-fan-ji-fu-za-du-fen-xi/</id>
        <link href="https://choue.github.io/post/kao-yan-zhong-shu-ju-jie-gou-dai-ma-de-shu-xie-gui-fan-ji-fu-za-du-fen-xi/">
        </link>
        <updated>2020-07-13T05:13:45.000Z</updated>
        <summary type="html"><![CDATA[<p>针对考研中数据结构和算法内容代码的手写要求<br>
算法的复杂度分析问题</p>
]]></summary>
        <content type="html"><![CDATA[<p>针对考研中数据结构和算法内容代码的手写要求<br>
算法的复杂度分析问题</p>
<!-- more -->
<h2 id="手写规范">手写规范</h2>
<p>在考研初试中的代码都是手写，判断交给的是人，不是编译器，所以在书写上尽量追求一个易懂的规范。<br>
首先是明确哪些东西要写，哪些不要写。<br>
例如<code>include&lt;iostream&gt;</code>,<code>using namespace std</code>这些要在写程序时写出的就不需要在试卷上写出。<br>
对于定义常量的语句<code>define N 50</code>，不需要明显写出，在需要处使用注释说明该常量已经被定义过即可。<br>
对于所谓的main函数，在答题时也不需要按部就班的写出来，可以把用到的功能函数的接口写清楚即可。<br>
下面给出一个例子：<br>
设一个n个整数的数组R，将R中的序列循环左移P个位置。<br>
将问题分解为三步💃：</p>
<ul>
<li>前P个元素逆置</li>
<li>后面的元素逆置</li>
<li>整体进行一次逆置</li>
</ul>
<p>设计一个可以对数组某子序列进行逆序的函数，然后调用即可。</p>
<pre><code class="language-c">void Reverse(int R[],int l,int r){
    int i, j;
    int temp;
    for (i = l , j = r; i&lt;j; ++i,--j ){
        temp = R[i];
        R[i] = R[j];
        R[j] = temp;
    }
}

void RCR (int R[],int n,int p){
    if (p&lt;=0||p&gt;n){
        cout &lt;&lt; &quot;ERROR&quot;&lt;&lt; endl;
    }
    else{
        Reverse(R,0,p-1);
        Reverse(R,p,n-1);
        Reverse(R,0,n-1);
    }
}
</code></pre>
<p>在上述例子中，RCR这个函数就是最终的程序接口，有了这个函数就可以不写main函数。</p>
<h2 id="指针">指针</h2>
<p>指针型变量定义：</p>
<pre><code class="language-c">int *a;
char *c;
float *b;
</code></pre>
<p><code>*</code>这个符号也是取地址运算符，对于指针变量，如果要取到其地址中对应的值，使用<code>x = *a</code>，即可取到a变量对应地址的值。<br>
最常用的地方为构造链表的结点、二叉树结点等。<br>
这里的构造实际上是构造一个结构型的变量。<br>
以链表的结点为例子，一个链表的结点需要两个域，数据域用来放数据，指针域用来存下一个结点的地址。</p>
<pre><code class="language-c">typedef struct Node{
    int data;
    struct Node *next;
}Node;
</code></pre>
<p>二叉树结点：</p>
<pre><code class="language-c">typedef struct BTNode{
    int data;
    struct BTNode *lchild;
    struct BTNode *rchild;
}BTnode;
</code></pre>
<p>定义好结构型之后，就可以通过结构来制作新的结点：</p>
<pre><code class="language-c">BTNode BT;
</code></pre>
<p>或者使用：</p>
<pre><code class="language-c">BTNode *BT;
BT = (BTNode *)malloc(sizeof(BTNode));
</code></pre>
<p>比较常用的是第二种，第二种的好处如下是声明出来的变量是指针型的，比较方便使用，需要的时候也可以离开原来的结点，换一个结点，但第一种就不行。声明的过程是先声明一个指针，然后通过<code>malloc</code>函数进行空间的分配，分配的空间大小是<code>BTNode</code>这个结构型的大小。其实这个语句就是中间是<code>malloc</code>，然后左右两边是这个结构的名称，前面是指针，后面有个<code>sizeof</code>。</p>
<p>对于1和2这两种方式，取分量的操作也不同，前面是用<code>x=BT.data</code>，后面使用<code>x=BT-&gt;data</code>。</p>
<h2 id="复杂度分析">复杂度分析</h2>
<p><strong>将算法中基本操作的执行次数作为算法的时间复杂度度量</strong>，对于时间复杂度的分析，要点在于算法中哪些操作是基本操作，然后计算出基本操作的执行次数即可。<br>
有的算法中，基本操作的执行次数不仅跟初始输入有关系，也跟数据本身有关系。例如一些排序算法，同样有n个数据，但数据初始有序性不同，则基本操作的执行次数也不同。一般按照使得基本操作执行次数最多的输入来计算时间复杂度，即将最坏的情况作为算法时间复杂度的度量。<br>
空间复杂度主要考虑临时占用的内存空间的大小。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github 裸仓库]]></title>
        <id>https://choue.github.io/post/github-luo-cang-ku/</id>
        <link href="https://choue.github.io/post/github-luo-cang-ku/">
        </link>
        <updated>2020-07-07T04:16:37.000Z</updated>
        <summary type="html"><![CDATA[<p>通常我们会使用<code>git init</code>来初始化Git本地仓库。</p>
]]></summary>
        <content type="html"><![CDATA[<p>通常我们会使用<code>git init</code>来初始化Git本地仓库。</p>
<!-- more -->
<h2 id="基本用法">基本用法</h2>
<ul>
<li>将当前目录转换为一个本地仓库</li>
</ul>
<pre><code class="language-bash">git init
</code></pre>
<p>命令执行之后在本地生成一个<code>.git</code>文件夹，用来追踪仓库所有的变更。<br>
可以使用<code>tree</code>命令打印目录结构。</p>
<ul>
<li>创建一个空的本地仓库</li>
</ul>
<pre><code class="language-bash">git init &lt;repo&gt;
</code></pre>
<p>命令执行之后，会在当前目录下生成一个新的名为<code>&lt;repo&gt;</code>的目录，里面只有<code>.git</code>目录。</p>
<h2 id="裸仓库">裸仓库</h2>
<ul>
<li>指定某个目录成为中心仓库（裸仓库）</li>
</ul>
<pre><code class="language-bash">git init --bare &lt;repo&gt;
</code></pre>
<p>这个命令执行之后，在本地会创建一个名为repo的目录，里面包含着Git的基本目录，这里一般的命名会写成<code>repo.git</code>的形式，对于<code>--bare</code>这个参数的含义，是生成的裸仓库，不包含工作区，所以不能在这个目录下面使用一般的Git命令。</p>
<h2 id="对比">对比</h2>
<p>对比使用传统的<code>git init</code>和使用加参数的<code>--bare</code>的区别。比较两个仓库的config文件：</p>
<ul>
<li>git init<pre><code class="language-js">[core]
  repositoryformatversion = 0
  filemode = true
  bare = false
  logallrefupdates = true
  ignorecase = true
  precomposeunicode = true
</code></pre>
</li>
<li>加参数的<pre><code class="language-js">[core]
  repositoryformatversion = 0
  filemode = true
  bare = true
  ignorecase = true
  precomposeunicode = true
</code></pre>
</li>
</ul>
<p>最明显的差异在于使用<code>bare</code>配置项是否为<code>true</code>，此外不加<code>--bare</code>参数的本地仓库配置中有一项<code>logallrefupdates = true</code>，即记录所有的ref更新。<br>
因此，在裸仓库上不会存在直接的提交变更等操作，但裸仓库可以正常的被<code>clone</code>和<code>push</code>。</p>
<h2 id="github上的用法">Github上的用法</h2>
<p>裸仓库可以用来复制仓库。<br>
因为通过<code>fork</code>来的仓库会受到一些限制，比如不能设置为私人仓库等，如果没有向原仓库<code>pull request</code>的需求的话，可以选择创造一个仓库的镜像到自己的Github上。</p>
<p>首先要在自己的Github上创建一个新的repo，然后在本地clone一个裸仓库。</p>
<pre><code class="language-bash">git clone --bare &lt;address&gt;
</code></pre>
<p>然后使用<code>mirror-push</code>：</p>
<pre><code class="language-bash">cd old-repo.git
git push --mirror &lt;your new repo address on github&gt;
</code></pre>
<p>最后删除位于本地的裸仓库即可：</p>
<pre><code class="language-bash">cd ..
rm -rf old-repo.git
</code></pre>
]]></content>
    </entry>
</feed>