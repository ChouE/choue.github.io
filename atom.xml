<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://choue.github.io</id>
    <title>ChouEV</title>
    <updated>2020-07-13T14:11:07.107Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://choue.github.io"/>
    <link rel="self" href="https://choue.github.io/atom.xml"/>
    <subtitle>WHY</subtitle>
    <logo>https://choue.github.io/images/avatar.png</logo>
    <icon>https://choue.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ChouEV</rights>
    <entry>
        <title type="html"><![CDATA[考研中数据结构代码的书写规范及复杂度分析]]></title>
        <id>https://choue.github.io/post/kao-yan-zhong-shu-ju-jie-gou-dai-ma-de-shu-xie-gui-fan-ji-fu-za-du-fen-xi/</id>
        <link href="https://choue.github.io/post/kao-yan-zhong-shu-ju-jie-gou-dai-ma-de-shu-xie-gui-fan-ji-fu-za-du-fen-xi/">
        </link>
        <updated>2020-07-13T05:13:45.000Z</updated>
        <summary type="html"><![CDATA[<p>针对考研中数据结构和算法内容代码的手写要求<br>
算法的复杂度分析问题</p>
]]></summary>
        <content type="html"><![CDATA[<p>针对考研中数据结构和算法内容代码的手写要求<br>
算法的复杂度分析问题</p>
<!-- more -->
<h2 id="手写规范">手写规范</h2>
<p>在考研初试中的代码都是手写，判断交给的是人，不是编译器，所以在书写上尽量追求一个易懂的规范。<br>
首先是明确哪些东西要写，哪些不要写。<br>
例如<code>include&lt;iostream&gt;</code>,<code>using namespace std</code>这些要在写程序时写出的就不需要在试卷上写出。<br>
对于定义常量的语句<code>define N 50</code>，不需要明显写出，在需要处使用注释说明该常量已经被定义过即可。<br>
对于所谓的main函数，在答题时也不需要按部就班的写出来，可以把用到的功能函数的接口写清楚即可。<br>
下面给出一个例子：<br>
设一个n个整数的数组R，将R中的序列循环左移P个位置。<br>
将问题分解为三步💃：</p>
<ul>
<li>前P个元素逆置</li>
<li>后面的元素逆置</li>
<li>整体进行一次逆置</li>
</ul>
<p>设计一个可以对数组某子序列进行逆序的函数，然后调用即可。</p>
<pre><code class="language-c">void Reverse(int R[],int l,int r){
    int i, j;
    int temp;
    for (i = l , j = r; i&lt;j; ++i,--j ){
        temp = R[i];
        R[i] = R[j];
        R[j] = temp;
    }
}

void RCR (int R[],int n,int p){
    if (p&lt;=0||p&gt;n){
        cout &lt;&lt; &quot;ERROR&quot;&lt;&lt; endl;
    }
    else{
        Reverse(R,0,p-1);
        Reverse(R,p,n-1);
        Reverse(R,0,n-1);
    }
}
</code></pre>
<p>在上述例子中，RCR这个函数就是最终的程序接口，有了这个函数就可以不写main函数。</p>
<h2 id="指针">指针</h2>
<p>指针型变量定义：</p>
<pre><code class="language-c">int *a;
char *c;
float *b;
</code></pre>
<p><code>*</code>这个符号也是取地址运算符，对于指针变量，如果要取到其地址中对应的值，使用<code>x = *a</code>，即可取到a变量对应地址的值。<br>
最常用的地方为构造链表的结点、二叉树结点等。<br>
这里的构造实际上是构造一个结构型的变量。<br>
以链表的结点为例子，一个链表的结点需要两个域，数据域用来放数据，指针域用来存下一个结点的地址。</p>
<pre><code class="language-c">typedef struct Node{
    int data;
    struct Node *next;
}Node;
</code></pre>
<p>二叉树结点：</p>
<pre><code class="language-c">typedef struct BTNode{
    int data;
    struct BTNode *lchild;
    struct BTNode *rchild;
}BTnode;
</code></pre>
<p>定义好结构型之后，就可以通过结构来制作新的结点：</p>
<pre><code class="language-c">BTNode BT;
</code></pre>
<p>或者使用：</p>
<pre><code class="language-c">BTNode *BT;
BT = (BTNode *)malloc(sizeof(BTNode));
</code></pre>
<p>比较常用的是第二种，第二种的好处如下是声明出来的变量是指针型的，比较方便使用，需要的时候也可以离开原来的结点，换一个结点，但第一种就不行。声明的过程是先声明一个指针，然后通过<code>malloc</code>函数进行空间的分配，分配的空间大小是<code>BTNode</code>这个结构型的大小。其实这个语句就是中间是<code>malloc</code>，然后左右两边是这个结构的名称，前面是指针，后面有个<code>sizeof</code>。</p>
<p>对于1和2这两种方式，取分量的操作也不同，前面是用<code>x=BT.data</code>，后面使用<code>x=BT-&gt;data</code>。</p>
<h2 id="复杂度分析">复杂度分析</h2>
<p><strong>将算法中基本操作的执行次数作为算法的时间复杂度度量</strong>，对于时间复杂度的分析，要点在于算法中哪些操作是基本操作，然后计算出基本操作的执行次数即可。<br>
有的算法中，基本操作的执行次数不仅跟初始输入有关系，也跟数据本身有关系。例如一些排序算法，同样有n个数据，但数据初始有序性不同，则基本操作的执行次数也不同。一般按照使得基本操作执行次数最多的输入来计算时间复杂度，即将最坏的情况作为算法时间复杂度的度量。<br>
空间复杂度主要考虑临时占用的内存空间的大小。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github 裸仓库]]></title>
        <id>https://choue.github.io/post/github-luo-cang-ku/</id>
        <link href="https://choue.github.io/post/github-luo-cang-ku/">
        </link>
        <updated>2020-07-07T04:16:37.000Z</updated>
        <summary type="html"><![CDATA[<p>通常我们会使用<code>git init</code>来初始化Git本地仓库。</p>
]]></summary>
        <content type="html"><![CDATA[<p>通常我们会使用<code>git init</code>来初始化Git本地仓库。</p>
<!-- more -->
<h2 id="基本用法">基本用法</h2>
<ul>
<li>将当前目录转换为一个本地仓库</li>
</ul>
<pre><code class="language-bash">git init
</code></pre>
<p>命令执行之后在本地生成一个<code>.git</code>文件夹，用来追踪仓库所有的变更。<br>
可以使用<code>tree</code>命令打印目录结构。</p>
<ul>
<li>创建一个空的本地仓库</li>
</ul>
<pre><code class="language-bash">git init &lt;repo&gt;
</code></pre>
<p>命令执行之后，会在当前目录下生成一个新的名为<code>&lt;repo&gt;</code>的目录，里面只有<code>.git</code>目录。</p>
<h2 id="裸仓库">裸仓库</h2>
<ul>
<li>指定某个目录成为中心仓库（裸仓库）</li>
</ul>
<pre><code class="language-bash">git init --bare &lt;repo&gt;
</code></pre>
<p>这个命令执行之后，在本地会创建一个名为repo的目录，里面包含着Git的基本目录，这里一般的命名会写成<code>repo.git</code>的形式，对于<code>--bare</code>这个参数的含义，是生成的裸仓库，不包含工作区，所以不能在这个目录下面使用一般的Git命令。</p>
<h2 id="对比">对比</h2>
<p>对比使用传统的<code>git init</code>和使用加参数的<code>--bare</code>的区别。比较两个仓库的config文件：</p>
<ul>
<li>git init<pre><code class="language-js">[core]
  repositoryformatversion = 0
  filemode = true
  bare = false
  logallrefupdates = true
  ignorecase = true
  precomposeunicode = true
</code></pre>
</li>
<li>加参数的<pre><code class="language-js">[core]
  repositoryformatversion = 0
  filemode = true
  bare = true
  ignorecase = true
  precomposeunicode = true
</code></pre>
</li>
</ul>
<p>最明显的差异在于使用<code>bare</code>配置项是否为<code>true</code>，此外不加<code>--bare</code>参数的本地仓库配置中有一项<code>logallrefupdates = true</code>，即记录所有的ref更新。<br>
因此，在裸仓库上不会存在直接的提交变更等操作，但裸仓库可以正常的被<code>clone</code>和<code>push</code>。</p>
<h2 id="github上的用法">Github上的用法</h2>
<p>裸仓库可以用来复制仓库。<br>
因为通过<code>fork</code>来的仓库会受到一些限制，比如不能设置为私人仓库等，如果没有向原仓库<code>pull request</code>的需求的话，可以选择创造一个仓库的镜像到自己的Github上。</p>
<p>首先要在自己的Github上创建一个新的repo，然后在本地clone一个裸仓库。</p>
<pre><code class="language-bash">git clone --bare &lt;address&gt;
</code></pre>
<p>然后使用<code>mirror-push</code>：</p>
<pre><code class="language-bash">cd old-repo.git
git push --mirror &lt;your new repo address on github&gt;
</code></pre>
<p>最后删除位于本地的裸仓库即可：</p>
<pre><code class="language-bash">cd ..
rm -rf old-repo.git
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://choue.github.io/post/about/</id>
        <link href="https://choue.github.io/post/about/">
        </link>
        <updated>2020-07-02T11:02:53.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>欢迎来到我的Blog，很高兴遇见你！🤝</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的Blog，很高兴遇见你！🤝</p>
</blockquote>
<!-- more -->
<h2 id="关于本站">🏠 关于本站</h2>
<p>使用Gridea管理的个人博客网站，随便写点东西</p>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<p>ChouEV</p>
<h2 id="联系我呀">📬 联系我呀</h2>
<p><a href="https://github.com/ChouE">Github</a><br>
<a href="https://steamcommunity.com/id/ChouEV/">Steam</a><br>
<a href="mailto:li945762681@gmail.com">Email</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://choue.github.io/post/hello-gridea/</id>
        <link href="https://choue.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>